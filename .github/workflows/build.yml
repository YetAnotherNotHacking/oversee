name: Build Binaries

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            arch: x64
          - os: ubuntu-24.04
            arch: x64
          - os: windows-latest
            arch: x64
          - os: macos-latest
            arch: arm64
          - os: macos-latest
            arch: x64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Install gettext on macOS
      - name: Install gettext (macOS only)
        if: runner.os == 'macOS'
        run: |
          if [[ "${{ matrix.arch }}" == "x64" ]]; then
            # For x64, we need to use Rosetta 2 to install x86_64 version
            arch -x86_64 /bin/bash -c '
              brew install gettext
              brew link gettext --force
              # Set library path for gettext
              echo "GETTEXT_PATH=$(brew --prefix gettext)" >> $GITHUB_ENV
              echo "DYLD_LIBRARY_PATH=$(brew --prefix gettext)/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
              echo "LIBRARY_PATH=$(brew --prefix gettext)/lib:$LIBRARY_PATH" >> $GITHUB_ENV
              # Create symlink in the expected location
              sudo mkdir -p /usr/local/opt/gettext/lib
              sudo ln -sf $(brew --prefix gettext)/lib/libintl.8.dylib /usr/local/opt/gettext/lib/libintl.8.dylib
            '
          else
            # For arm64, use native installation
            brew install gettext
            brew link gettext --force
            # Set library path for gettext
            echo "GETTEXT_PATH=$(brew --prefix gettext)" >> $GITHUB_ENV
            echo "DYLD_LIBRARY_PATH=$(brew --prefix gettext)/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
            echo "LIBRARY_PATH=$(brew --prefix gettext)/lib:$LIBRARY_PATH" >> $GITHUB_ENV
            # Create symlink in the expected location
            sudo mkdir -p /usr/local/opt/gettext/lib
            sudo ln -sf $(brew --prefix gettext)/lib/libintl.8.dylib /usr/local/opt/gettext/lib/libintl.8.dylib
          fi

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          architecture: ${{ matrix.arch }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # Windows-specific: Install NSIS for installer creation
      - name: Install NSIS (Windows only)
        if: runner.os == 'Windows'
        run: |
          choco install nsis -y

      # Linux-specific: Install AppImage tools
      - name: Install AppImage tools (Linux only)
        if: runner.os == 'Linux'
        run: |
          # Install FUSE for AppImage support
          sudo apt-get update
          sudo apt-get install -y fuse libfuse2 file
          
          # Download AppImageTool directly as executable
          wget -O appimagetool https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool
          
          # Try to run it directly first, if that fails extract it
          if ! ./appimagetool --help >/dev/null 2>&1; then
            echo "Direct execution failed, extracting AppImageTool..."
            ./appimagetool --appimage-extract
            chmod +x squashfs-root/AppRun
            # Use the extracted version
            sudo cp squashfs-root/AppRun /usr/local/bin/appimagetool
            sudo chmod +x /usr/local/bin/appimagetool
          else
            echo "Direct execution works, moving to /usr/local/bin"
            sudo mv appimagetool /usr/local/bin/appimagetool
          fi

      - name: Build with PyInstaller
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            # macOS with icon
            if [ -f "assets/logo.png" ]; then
              # Convert PNG to ICNS for macOS
              mkdir -p SilverFlagOVERSEE.iconset
              sips -z 16 16 assets/logo.png --out SilverFlagOVERSEE.iconset/icon_16x16.png
              sips -z 32 32 assets/logo.png --out SilverFlagOVERSEE.iconset/icon_16x16@2x.png
              sips -z 32 32 assets/logo.png --out SilverFlagOVERSEE.iconset/icon_32x32.png
              sips -z 64 64 assets/logo.png --out SilverFlagOVERSEE.iconset/icon_32x32@2x.png
              sips -z 128 128 assets/logo.png --out SilverFlagOVERSEE.iconset/icon_128x128.png
              sips -z 256 256 assets/logo.png --out SilverFlagOVERSEE.iconset/icon_128x128@2x.png
              sips -z 256 256 assets/logo.png --out SilverFlagOVERSEE.iconset/icon_256x256.png
              sips -z 512 512 assets/logo.png --out SilverFlagOVERSEE.iconset/icon_256x256@2x.png
              sips -z 512 512 assets/logo.png --out SilverFlagOVERSEE.iconset/icon_512x512.png
              cp assets/logo.png SilverFlagOVERSEE.iconset/icon_512x512@2x.png
              iconutil -c icns SilverFlagOVERSEE.iconset
              pyinstaller --windowed --icon=SilverFlagOVERSEE.icns src/main.py --name SilverFlagOVERSEE-${{ matrix.arch }} --distpath dist
            else
              pyinstaller --windowed src/main.py --name SilverFlagOVERSEE-${{ matrix.arch }} --distpath dist
            fi
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            # Windows with icon
            if [ -f "assets/logo.png" ]; then
              # Convert PNG to ICO for Windows using Python
              python -c "
          from PIL import Image
          import sys
          try:
              img = Image.open('assets/logo.png')
              img.save('logo.ico', format='ICO', sizes=[(16,16), (32,32), (48,48), (64,64), (128,128), (256,256)])
              print('Icon converted successfully')
          except Exception as e:
              print(f'Icon conversion failed: {e}')
              sys.exit(0)  # Don't fail the build
          "
              if [ -f "logo.ico" ]; then
                pyinstaller --onefile --windowed --icon=logo.ico src/main.py --name SilverFlagOVERSEE --distpath dist
              else
                pyinstaller --onefile --windowed src/main.py --name SilverFlagOVERSEE --distpath dist
              fi
            else
              pyinstaller --onefile --windowed src/main.py --name SilverFlagOVERSEE --distpath dist
            fi
          else
            # Linux with all dependencies
            pyinstaller --onefile --windowed \
              --hidden-import=beautifulsoup4 \
              --hidden-import=cv2 \
              --hidden-import=numpy \
              --hidden-import=requests \
              --hidden-import=psutil \
              --hidden-import=pyautogui \
              --hidden-import=pynput \
              --hidden-import=folium \
              --hidden-import=tkintermapview \
              --hidden-import=appdirs \
              --hidden-import=OpenSSL \
              --hidden-import=playwright \
              --hidden-import=PIL \
              --hidden-import=ttkthemes \
              --hidden-import=sqlite3 \
              --hidden-import=tkinter \
              --hidden-import=tkinter.ttk \
              --hidden-import=tkinter.messagebox \
              --hidden-import=tkinter.filedialog \
              --collect-all playwright \
              --collect-all beautifulsoup4 \
              --collect-all cv2 \
              --collect-all tkintermapview \
              --collect-all ttkthemes \
              src/main.py --name SilverFlagOVERSEE --distpath dist
          fi
        shell: bash

      # Create AppImage for Linux
      - name: Create AppImage (Linux only)
        if: runner.os == 'Linux'
        run: |
          APP_NAME=SilverFlagOVERSEE
          APPDIR=dist/${APP_NAME}.AppDir
          
          # Create AppDir structure
          mkdir -p "$APPDIR/usr/bin"
          mkdir -p "$APPDIR/usr/share/applications"
          mkdir -p "$APPDIR/usr/share/icons/hicolor/256x256/apps"
          
          # Copy the binary
          cp "dist/${APP_NAME}" "$APPDIR/usr/bin/"
          chmod +x "$APPDIR/usr/bin/${APP_NAME}"
          
          # Copy icon if it exists
          if [ -f "assets/logo.png" ]; then
            cp "assets/logo.png" "$APPDIR/usr/share/icons/hicolor/256x256/apps/${APP_NAME}.png"
            cp "assets/logo.png" "$APPDIR/${APP_NAME}.png"
          fi
          
          # Create .desktop file
          cat > "$APPDIR/usr/share/applications/${APP_NAME}.desktop" << DESKTOP_EOF
          [Desktop Entry]
          Type=Application
          Name=${APP_NAME}
          Comment=SilverFlag OVERSEE Application
          Exec=${APP_NAME}
          Icon=${APP_NAME}
          Categories=Utility;
          Terminal=false
          DESKTOP_EOF
          
          # Copy .desktop file to AppDir root
          cp "$APPDIR/usr/share/applications/${APP_NAME}.desktop" "$APPDIR/"
          chmod +x "$APPDIR/${APP_NAME}.desktop"
          
          # Create AppRun script
          cat > "$APPDIR/AppRun" << 'APPRUN_EOF'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          EXEC="${HERE}/usr/bin/SilverFlagOVERSEE"
          exec "${EXEC}" "$@"
          APPRUN_EOF
          
          chmod +x "$APPDIR/AppRun"
          
          # Debug: List the AppDir contents
          echo "AppDir contents:"
          find "$APPDIR" -type f -exec ls -la {} \;
          
          # Create the AppImage using whichever appimagetool is available
          if command -v appimagetool >/dev/null 2>&1; then
            echo "Using appimagetool from PATH"
            appimagetool "$APPDIR" "dist/${APP_NAME}-${RUNNER_OS}.AppImage"
          elif [ -f "./appimagetool" ]; then
            echo "Using local appimagetool"
            ./appimagetool "$APPDIR" "dist/${APP_NAME}-${RUNNER_OS}.AppImage"
          elif [ -f "squashfs-root/AppRun" ]; then
            echo "Using extracted appimagetool"
            squashfs-root/AppRun "$APPDIR" "dist/${APP_NAME}-${RUNNER_OS}.AppImage"
          else
            echo "No appimagetool found, creating tar.gz instead"
            cd dist
            tar -czf "${APP_NAME}-${RUNNER_OS}.tar.gz" "${APP_NAME}.AppDir"
            cd ..
          fi

      # Create AppleScript file separately to avoid escaping hell
      - name: Create AppleScript for DMG (macOS only)
        if: runner.os == 'macOS'
        run: |
          cat > dmg_setup.applescript << 'APPLESCRIPT_EOF'
          tell application "Finder"
            tell disk "Install SilverFlagOVERSEE"
              open
              set current view of container window to icon view
              set toolbar visible of container window to false
              set statusbar visible of container window to false
              set the bounds of container window to {100, 100, 900, 600}
              set viewOptions to the icon view options of container window
              set arrangement of viewOptions to not arranged
              set icon size of viewOptions to 128
              set background picture of viewOptions to file ".background:background.png"
              
              -- Position the app and Applications link
              set position of item "SilverFlagOVERSEE.app" to {200, 300}
              set position of item "Applications" to {600, 300}
              
              close
              open
              update without registering applications
              delay 2
            end tell
          end tell
          APPLESCRIPT_EOF

      - name: Create DMG (macOS only)
        if: runner.os == 'macOS'
        run: |
          APP_NAME=SilverFlagOVERSEE
          APP_PATH=dist/${APP_NAME}.app
          DMG_NAME=${APP_NAME}.dmg
          VOL_NAME="Install ${APP_NAME}"
          DMG_TEMP=tmp.dmg
          STAGING_DIR=dist/dmg-staging
          BACKGROUND_PATH=$GITHUB_WORKSPACE/assets/dmg-background.png

          # Create staging directory
          mkdir -p "$STAGING_DIR/.background"
          cp -R "$APP_PATH" "$STAGING_DIR/"
          ln -s /Applications "$STAGING_DIR/Applications"
          
          # Use a default background if custom one doesn't exist
          if [ -f "$BACKGROUND_PATH" ]; then
            cp "$BACKGROUND_PATH" "$STAGING_DIR/.background/background.png"
          else
            # Create a simple colored background
            python3 -c "
          from PIL import Image
          img = Image.new('RGB', (900, 600), color='#f0f0f0')
          img.save('$STAGING_DIR/.background/background.png')
          " || echo "No PIL available, skipping background"
          fi

          # Create temporary DMG
          hdiutil create -srcfolder "$STAGING_DIR" -volname "$VOL_NAME" -fs HFS+ \
            -fsargs "-c c=64,a=16,e=16" -format UDRW -ov "$DMG_TEMP"

          # Mount the DMG with a specific mount point
          MOUNT_DIR="/Volumes/$VOL_NAME"
          echo "Attempting to mount at: $MOUNT_DIR"
          
          # Ensure mount point doesn't exist
          if [ -d "$MOUNT_DIR" ]; then
            hdiutil detach "$MOUNT_DIR" -force || true
            sleep 1
          fi
          
          # Mount with explicit mount point
          hdiutil attach -readwrite -nobrowse -noverify -mountpoint "$MOUNT_DIR" "$DMG_TEMP"
          
          # Verify mount succeeded
          if [ -d "$MOUNT_DIR" ] && [ -d "$MOUNT_DIR/${APP_NAME}.app" ]; then
            echo "DMG mounted successfully at $MOUNT_DIR"
            
            # Run the AppleScript
            osascript dmg_setup.applescript || echo "AppleScript failed, continuing..."
            
            # Give Finder time to process
            sleep 3
            
            # Ensure all Finder operations are complete
            sync
            
            # Force unmount with retry
            for i in {1..5}; do
              if hdiutil detach "$MOUNT_DIR" 2>/dev/null; then
                echo "Successfully detached DMG"
                break
              elif [ $i -eq 5 ]; then
                echo "Force detaching DMG"
                hdiutil detach "$MOUNT_DIR" -force || true
                sleep 2
                break
              else
                echo "Detach attempt $i failed, retrying..."
                sleep 2
              fi
            done
          else
            echo "Failed to mount DMG properly"
          fi

          # Wait a moment before conversion
          sleep 2

          # Convert to compressed DMG with retry
          for i in {1..3}; do
            if hdiutil convert "$DMG_TEMP" -format UDZO -imagekey zlib-level=9 -o "dist/${DMG_NAME}" 2>/dev/null; then
              echo "DMG conversion successful"
              break
            elif [ $i -eq 3 ]; then
              echo "DMG conversion failed after 3 attempts, creating simple DMG"
              # Fallback: create a simple compressed DMG directly
              hdiutil create -srcfolder "$STAGING_DIR" -volname "$VOL_NAME" -format UDZO -o "dist/${DMG_NAME}"
            else
              echo "DMG conversion attempt $i failed, retrying..."
              sleep 3
            fi
          done
          
          # Clean up
          rm -f "$DMG_TEMP"
          rm -rf "$STAGING_DIR"
          rm -f dmg_setup.applescript

      # Create NSIS installer script for Windows using Python
      - name: Create NSIS installer script (Windows only)
        if: runner.os == 'Windows'
        run: |
          python -c "
          nsis_content = '''!define APP_NAME \"SilverFlagOVERSEE\"
          !define APP_VERSION \"1.0.0\"
          !define APP_PUBLISHER \"Your Company\"
          !define APP_URL \"https://yourwebsite.com\"
          !define APP_EXE \"SilverFlagOVERSEE.exe\"

          ; Installer attributes
          Name \"\${APP_NAME}\"
          OutFile \"dist\\\\SilverFlagOVERSEE-Installer.exe\"
          InstallDir \"\$PROGRAMFILES64\\\\\${APP_NAME}\"
          InstallDirRegKey HKLM \"Software\\\\\${APP_NAME}\" \"Install_Dir\"
          RequestExecutionLevel admin

          ; Modern UI
          !include \"MUI2.nsh\"
          !define MUI_ABORTWARNING
          
          ; Use custom icon if available
          !if /FileExists \"logo.ico\"
            !define MUI_ICON \"logo.ico\"
            !define MUI_UNICON \"logo.ico\"
          !else
            !define MUI_ICON \"\${NSISDIR}\\\\Contrib\\\\Graphics\\\\Icons\\\\modern-install.ico\"
            !define MUI_UNICON \"\${NSISDIR}\\\\Contrib\\\\Graphics\\\\Icons\\\\modern-uninstall.ico\"
          !endif

          ; Pages
          !insertmacro MUI_PAGE_WELCOME
          !insertmacro MUI_PAGE_LICENSE \"LICENSE.txt\"
          !insertmacro MUI_PAGE_DIRECTORY
          !insertmacro MUI_PAGE_INSTFILES
          !insertmacro MUI_PAGE_FINISH

          ; Uninstaller pages
          !insertmacro MUI_UNPAGE_WELCOME
          !insertmacro MUI_UNPAGE_CONFIRM
          !insertmacro MUI_UNPAGE_INSTFILES
          !insertmacro MUI_UNPAGE_FINISH

          ; Languages
          !insertmacro MUI_LANGUAGE \"English\"

          ; Installer sections
          Section \"Install\"
            SetOutPath \$INSTDIR
            File \"dist\\\\SilverFlagOVERSEE.exe\"
            
            ; Create start menu shortcut
            CreateDirectory \"\$SMPROGRAMS\\\\\${APP_NAME}\"
            CreateShortcut \"\$SMPROGRAMS\\\\\${APP_NAME}\\\\\${APP_NAME}.lnk\" \"\$INSTDIR\\\\\${APP_EXE}\"
            CreateShortcut \"\$SMPROGRAMS\\\\\${APP_NAME}\\\\Uninstall.lnk\" \"\$INSTDIR\\\\uninstall.exe\"
            
            ; Create desktop shortcut
            CreateShortcut \"\$DESKTOP\\\\\${APP_NAME}.lnk\" \"\$INSTDIR\\\\\${APP_EXE}\"
            
            ; Write registry keys
            WriteRegStr HKLM \"Software\\\\\${APP_NAME}\" \"Install_Dir\" \"\$INSTDIR\"
            WriteRegStr HKLM \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\\${APP_NAME}\" \"DisplayName\" \"\${APP_NAME}\"
            WriteRegStr HKLM \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\\${APP_NAME}\" \"UninstallString\" '\"\$INSTDIR\\\\uninstall.exe\"'
            WriteRegStr HKLM \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\\${APP_NAME}\" \"DisplayVersion\" \"\${APP_VERSION}\"
            WriteRegStr HKLM \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\\${APP_NAME}\" \"Publisher\" \"\${APP_PUBLISHER}\"
            WriteRegStr HKLM \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\\${APP_NAME}\" \"URLInfoAbout\" \"\${APP_URL}\"
            WriteRegDWORD HKLM \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\\${APP_NAME}\" \"NoModify\" 1
            WriteRegDWORD HKLM \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\\${APP_NAME}\" \"NoRepair\" 1
            
            ; Create uninstaller
            WriteUninstaller \"\$INSTDIR\\\\uninstall.exe\"
          SectionEnd

          ; Uninstaller section
          Section \"Uninstall\"
            ; Remove files
            Delete \"\$INSTDIR\\\\\${APP_EXE}\"
            Delete \"\$INSTDIR\\\\uninstall.exe\"
            RMDir \"\$INSTDIR\"
            
            ; Remove shortcuts
            Delete \"\$SMPROGRAMS\\\\\${APP_NAME}\\\\\${APP_NAME}.lnk\"
            Delete \"\$SMPROGRAMS\\\\\${APP_NAME}\\\\Uninstall.lnk\"
            RMDir \"\$SMPROGRAMS\\\\\${APP_NAME}\"
            Delete \"\$DESKTOP\\\\\${APP_NAME}.lnk\"
            
            ; Remove registry keys
            DeleteRegKey HKLM \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\\${APP_NAME}\"
            DeleteRegKey HKLM \"Software\\\\\${APP_NAME}\"
          SectionEnd
          '''
          
          with open('installer.nsi', 'w', encoding='utf-8') as f:
              f.write(nsis_content)
          print('NSIS installer script created successfully')
          "
        shell: bash

      # Create a basic license file if it doesn't exist
      - name: Create LICENSE.txt for Windows installer
        if: runner.os == 'Windows'
        run: |
          python -c "
          import os
          if not os.path.exists('LICENSE.txt'):
              license_text = '''MIT License

          Permission is hereby granted, free of charge, to any person obtaining a copy
          of this software and associated documentation files (the \"Software\"), to deal
          in the Software without restriction, including without limitation the rights
          to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
          copies of the Software, and to permit persons to whom the Software is
          furnished to do so, subject to the following conditions:

          The above copyright notice and this permission notice shall be included in all
          copies or substantial portions of the Software.

          THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
          IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
          FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
          AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
          LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
          OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
          SOFTWARE.'''
              with open('LICENSE.txt', 'w', encoding='utf-8') as f:
                  f.write(license_text)
              print('LICENSE.txt created')
          else:
              print('LICENSE.txt already exists')
          "
        shell: bash

      # Build Windows installer
      - name: Build Windows installer
        if: runner.os == 'Windows'
        run: |
          makensis installer.nsi

      - name: Set build timestamp
        run: |
          echo "DATE_TAG=$(date +'%Y-%m-%d-%H%M')" >> $GITHUB_ENV
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SilverFlagOVERSEE-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            dist/SilverFlagOVERSEE.dmg
            dist/SilverFlagOVERSEE-Installer.exe
            dist/SilverFlagOVERSEE-*.AppImage
            dist/SilverFlagOVERSEE-*.tar.gz
            dist/SilverFlagOVERSEE*
            dist/SilverFlagOVERSEE.app